pipeline {
       agent any
  parameters {
    string(name: 'CAMUNDA_URL', defaultValue: 'CAMUNDA-URL-GOES-HERE', description: 'URL of Camunda Instance.')
    choice(name: 'CAMUNDA_ENV', choices: 'dev\naccept', description: 'What Config Environment Files should be used?')
    booleanParam(name: 'USE_BASIC_AUTH', defaultValue: false, description: 'Check this box if you want to use Camunda Basic Auth.')
    string(name: 'CAMUNDA_USERNAME', defaultValue: 'default_username', description: 'Camunda Basic Auth Username: Must not be empty if you use Basic Auth.')
    password(name: 'CAMUNDA_PASSWORD', defaultValue: 'default_password', description: 'Camunda Basic Auth Password: Must not be empty if you use Basic Auth.  WARNING: Passwords are exposed in the console output of this build script!!')
  }
      stages {
          stage("clone") {
              steps {
            checkout scm
          }
        }
        stage("build & SonarQube analysis") {
              steps{
            builddeploy()
          }
        }
        stage('Deploy approval'){
        steps{
        depapp()
   
}
}
        stage("Quality Gate") {
         steps {
          quality()
          }
        }
        
      }
    }

def builddeploy(){
withSonarQubeEnv('sonar-server') {
              sh '/opt/maven/bin/mvn clean package sonar:sonar'
            }
}
def depapp(){
 timeout(time: 7, unit: 'DAYS'){
 mail to: 'jeetendrak69@gmail.com', subject: "Please approve #${env.BUILD_NUMBER}", body: """
See ${env.BUILD_URL}input/
"""
    input submitter: 'userId', message: 'Ready?'}
}

def quality()
{timeout(time: 5, unit: 'MINUTES') {
           waitForQualityGate abortPipeline: true}
}
